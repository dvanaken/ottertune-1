dist: bionic

language: python
python:
- 3.6

env:
  global:
  - DB_NAME=ottertune
  - ADMIN_PASSWORD=changeme
  - ROOT=$TRAVIS_BUILD_DIR
  - WEB=$ROOT/server/website
  - CONTROLLER=$ROOT/client/controller
  - DRIVER=$ROOT/client/driver

matrix:
  include:
  - name: Docker
    env:
    - BACKEND=postgresql
    - secure: "cvrlmbrffhQ2xzymBxg0PRjhoaf2NLXcoz1680SqGkQ4kRv2/Ip5ZDi4TOj4Z5HUdVDAx29PpLAi1k+zZJwe19f/ndxQ4mz+S0t3FYg88gGHF0BLxETTI1csvre7RbUoxgFHwBy4oTLFMjB7H/AwtLmb5XiKU5+C2ZXFxK9PdPC9eeJVKNHiyy5iaHNMyvkDShqcUzI4HRbXxObTjL9KxMPo7GgkGZKQNYmo4wccCJ6X10j0ZcjsTHi1DxWZy2qlJ6KUWYaN+1uj9WGTmiOq+yugjptMRP5kKRN7X2LFbpGppayfWaiHTDXlJqT5LpGHPKZoPVTyWgbcS8LCPV2Gkze3df9V9fneELWFkZqF6rxAXACEI1/7FBqM5octyU3gxB6704nB7SA6a2/GY0bXQbHxA3sF/4tRqm4LfGbLneMe42rVn5WHZUZRIhHQPGiSKegu/7m8bhCcZcoLLRFmBta3bjB1IZ0DsUbanlKlTTyNWkwEbYBaxbUJwHM2ZQDEvfiK0A10hnHFwCuYKPqNVjndYC8fq46DtnIQ8oViHZg+HXkyVR3QCH91n//tYmdfUUDg/ZNCFueEuv9X4DNDgfP9k75wIzoINrNFKDKDO8TgFh21p6xO8N5ScSGt/xtwfeMtbj5zIRFSwYC2PCikpcG4GgY34mam4MmVgJ/L/zM="
    - secure: "AzdQOp914jhDG+u6zSGy0Ue8yPR/werbeMp3GiP7O9uxPa9quL76bW0iyY1xG0kKIfJH94eg/QKdBHHxc0+RU3dwZU2+LP+OnD9IOOvX7jJFOwSdRjPAoKLFQFgG0YMGssOmyoz3xs5hmkzyppPUqPGIZm3fpqeNrWTAMVqUhr87HTR3yFf2nTNqpd6UrcRz61txcJBsP4f6zP6SvFpnHl1S0LCXYImGAawy8QGfK8Dr6nyXAbzVGiISu22NodMxZMrfJYdgamiEZQNGTxIF9RcAkHwB7YhqDIE/Rs2dbKcr91llTxU8J+0vvem5K07v3sw3mvUCDB0u7ZdsKGL3LLvO7CGhdXEVsVC5AFYZzZXqtJau1HrOJbIvtYyZELkO0l9l95x+Rmm67/2D6qudZj4RPLfWT4LJL4Nt9ECx9hqkhK4IX8tKoKU02Vy6JODeLqIGTe66ihTHqlfaDkuQaEdCsSMavpMb8vXfqaY9CuxXJb1xwA+oC7X5Mc7H34NeQ5Qhi5nGibXEnLFa4sMQPLh39/NmsPM05PDTHsSB/ZXMCrmDvWZAkYyGvjIm5nJIWRomgzInc0TkJWAHk1I4741nDNUsdkw2gRm6ptTi1QxMERpfl1oz924QQEAAILoLHOxFgWgFwQ6VkQsnkAMLaKXHS7Ypr5lKDswhM77EnBM="
    - secure: "hmdUYPp7xlqWtKa3kBGeRfaT+nkAaPUs3MAV8anJRwRgGd/o7UrMzMMCh03M7UC2nHi5OtSxtVVpoCYoYsGwS5Dk7QWYxxJffE3nK8wGKsTZFGfWrFjV0kbDqk//bggF8Osa9ZaNZv7sD4bGppHGW+gbSi/5B3JfKbxqo1a8Qi+vbhSJmXBYoLsZ5HhzbhoQXX+1lnGRZLmp5xR6ttYXIRnHsSnjhWvC/nPrSwiojkf3xI2i7e+/z5VPcz8Uv0Zauvub/pJ5TTc62AOcLTU+78W/cFoU/acwtCo9/eX3u40y621IbdIYMZWWWmVgV1fiHFXoYCMhlfu2wv0xUxkIpuDjorNtkNGus3coG+VcFpSKedA29fFqASw9+ECBP22BMtTJC4xVtXreG5u2vVNh+7IGStQP/p4d3yVSD/l+60s1KaQDrTGPDF2iqZw7VOrf3Tj+MgMsf2Z8N6jgB1ueTJbGonFs4arlLReXdGmqoWmFKe7y/xdP6Q5XlMNj1BnGm1QHt/9O0Y991rC0fRq3kUGt89qniQDFenIt+OzhwgJmfyWTkoArZ1MjUHHvfJbAK4oYB61389YtLalWotKnNUqHDlfEwh90kwMFIEchCgkI70oI4M2azsXRCsnthSVdFiYWV6YPZvJun4gcEqiDBvMvw1axsRzsteaZ04/rdcU="
    - secure: "oh/aW/oVb5Pe3K4JbRN8iFi5G8zKO97PDaPwcZ/5ppftSPYAYQ0muYg5B2ZsaGNnQ0kR24vrNf3oMFUVEOraJpz+nGV25p4sKlLotCtyd1lvBzHJgmXbLfWLrSpuUFwcp3vkpesYxnYj5EBGbzqkV6S/FrHrgoUzIm8D6BndBe7+IqunZIIRUJ/ZhfKDYaznyEClZGTvv1/w0bfzK9pqUazH4int0BfDxtOvFSpON+Wov8HoqX5k8ZThIkWe973gMlcfIg89HcjD33DDCljBHbaBztketoj2TuVVJlRa1e+n++1ypxkgenE4Eih99ExxZlnMIT5nJjq9VjW5nUiYJwYw2G+al/SMkQKwRqYgiecah7igXnCxuYUIKF4CuUhfXLnSi6jmIT7uRm+eJVmEkjMZE/u7sdi2oBTCZnpE2rBDzXvF8QhyocRxSQOXb/2GbSxVqZ7D4F06nSZGjuodfzCIedf52jiV77oI3Sbb15/WUZUlLUiJmkbmz5XBWbDUlzzCkGb9CPnsCjrTBIfmlcvQ0kW3FGABllrsk2olJbHFQWNceXjFlSGFefPsmjKGLtOp7J8mvw2YTEGnR46V2dq5E6Mj74TelaCscAw8k8MFroVYPEszunudSW/jjZ2fkMxKefspCy532Lt7kxkFXFzvrgKtB0/2O7ekAKnXyh0="
    - secure: "fdUymQLsU/ZR5itAKjrgV+KFM/r1DYSyHf0zYsj//YxxVoI1Zn2oYlpoDXxeUoYGGSOSeggIB2T68uV2tBgWSv8FAUX/js8Ay58JUG38DuIftUyALpmttDxKKjvtomHtlLl+R+CCUZpIf4Cu5TmlYUdQiuEOfSbbD2mnE5LOiwFtkm6NfKkxEDOj1AlvhYpZkidO7O5r0KPxIgAIE+b1/TERnfZiwNZ/gohWOFqW09gTLMTKQDUaUtguCK2vcb/1h/O5Avzt675zpTb7UwWei6S/XcnAXWhdjKDBxXcfBmXTt/Ps8lDiiiKrcilSblwp0ls8Zka0Yc7gDpyyTjgy+rHKh+wVxg0G8p5sSYNYTe7IMpJgCTeDQVz5xyrrSOQqk8GnqMEx8+yAI3EOJHFii90NFrHI8SbRYdcamdMcVpV86lqrv4skf7ib/cp4gESGfXGA+a9bGle9VEw+2rQsMAapi+V0SDZT1zVXyH1I0hrD80JaASYAbBjlp+AiPvrOess+cSS9QMIdN7HsYNOsEONy29zkdLgisS11AMI6iHR1N6+imkjPGShz5dlPiDRZlIMp8W6BBe4fysUXOY568VUMFTgUaGfgisorns3FzTgSSA/3z8q4T4B2pi1LxEWjXbd1PDP3XNrHQBS7u+9uYKQEwXfuaGu+SeFyvKWesjk="
    - secure: "n5JkGmQ/G1yMdkpU2jO4r+QSvXyqgBhl2lOOUBpEBSK8v9d1FaLnHVTAdjCJ2X02VxlgicrcTX3Tahcmh6bgyKPEurnB5yGRHHLEB8rSka2WCDpm0rcNyFKTFyywMiNGGQ804xiKILT/YDkRXAAhMvuxb+JgE+i+YuicJnF3VTVlvXpTCEJufJWhFKfBCbvjkl3z2l879zqlLMl1x5VG7qIjno+h9iL310dOhJP58nprWx9RnkTy5mxyPGD2X0sTAuPKrDxSCwjStKwn0depBgVRyTy+5b+jb7+1XUDLL5x80QnG+s926uoQH8VzOR09eX6jyThs7VQarovGaQR9aJVhowd8CVu/LhmnBW8QBo//dDHcQrFiswSD+tBojXPK9PMi1y77VEJniNNs621fWP483qsCnMXUg+M+O/h1e3I2ASvYtEQ/MyNtaugClvaMb2dUtMmrxpxWEPythUTftiHdjJlEwRdpD9RgfgYn+49SYfgz/f0QPCYXegxoDe2w6hpAS+gmRyJL+eqzI9adYQMCFU+b8MW31YJAs2G+erQ5Hy6eK4LNplhQ+YvPhsv33fEmUMhBFPPhaCZKjOzOvhi6k4G8N8kPOXu/d5G4dwtfoZlU4CZ9bs1e4QxudMDRFOYIvZML4eVSN8C2SvJIQtdjphGLVIk/SJvkzTs2sjM="
    - DOCKER_SERVICES="base web driver"
    services:
    - docker
    before_install:
    - docker --version
    - docker-compose --version
    - env | sort
    install: []
    before_script:
    - sudo service mysql stop || true
    - sudo service postgresql stop || true
    - cd $ROOT/docker
    - docker-compose -f docker-compose.build.yml build --build-arg GIT_COMMIT=$TRAVIS_COMMIT
    - myfile=`BACKEND=mysql WEB_ENTRYPOINT="''" ./create-docker-compose.sh -q`
    - pgfile=`BACKEND=postgresql WEB_ENTRYPOINT="''" ./create-docker-compose.sh -q`
    - echo "MySQL~ $myfile, PostgreSQL~ $pgfile"
    script:
    - docker-compose -f $pgfile run --workdir="/app" --no-deps --rm web bash -c "pip3 freeze | column -x"
    - docker-compose -f $pgfile run --workdir="/app/controller" --no-deps --rm driver gradle build
    - docker-compose -f $pgfile run --workdir="/app" --no-deps --rm web bash -c "python3 -m unittest discover -s analysis/tests -v"
    - docker-compose -f $pgfile run --rm web bash -c "./wait-for-it.sh && python3 manage.py makemigrations website && python3 manage.py test --noinput -v 2"
    - docker-compose -f $pgfile rm -f -s -v
    - docker-compose -f $myfile run --rm web bash -c "./wait-for-it.sh && python3 manage.py makemigrations website && python3 manage.py test --noinput -v 2"
    - docker-compose -f $myfile rm -f -s -v
    after_success: []
    before_deploy:
    - /$ROOT/.travis/before_deploy.sh
    deploy:
      provider: script
      script: /$ROOT/.travis/deploy.sh 
      on:
        #repo: cmu-db/ottertune
        #branch: master
        repo: dvanaken/ottertune-fork
        branch: travis-trigger-build
    after_deploy:
    - curl -LO --retry 3 https://raw.github.com/mernst/plume-lib/master/bin/trigger-travis.sh
    - sh trigger-travis.sh --pro --branch master "$TUSER" "$TREPO" "$TTOKEN"

  - name: Unit Tests (MySQL v5.7)
    env:
    - BACKEND=mysql
    services:
    - mysql
    addons:
      apt:
        update: true
        packages:
        - mysql-server
        - python-mysqldb
        - rabbitmq-server
        - openjdk-11-jdk
        - gradle
        - checkstyle
    before_install:
    - mysql -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME}"
    - sed -i '/psycopg2/d' $WEB/requirements.txt
    - echo "codecov" >> $WEB/requirements.txt

  - name: Unit Tests (PostgreSQL v9.6)
    env:
    - BACKEND=postgresql
    addons:
      postgresql: "9.6"
      apt:
        update: true
        packages:
        - rabbitmq-server
        - openjdk-11-jdk
        - gradle
        - checkstyle
    before_install:
    - psql -U postgres -c "CREATE DATABASE ${DB_NAME}"
    - sed -i '/mysqlclient/d' $WEB/requirements.txt
    - echo "codecov" >> $WEB/requirements.txt

  - name: Integration Tests (MySQL v5.7)
    env:
    - BACKEND=mysql
    services:
    - mysql
    addons:
      apt:
        update: true
        packages:
        - mysql-server
        - python-mysqldb
        - rabbitmq-server
    before_install:
    - mysql -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME}"
    - sed -i '/psycopg2/d' $WEB/requirements.txt
    - sed -i 's/^RUN_EVERY =.*$/RUN_EVERY = 180/' $WEB/website/settings/constants.py
    script:
    - cd $WEB && python manage.py runserver 0.0.0.0:8000 &
    - sleep 10 && cd $DRIVER && fab integration_tests
    after_success: []

  - name: Integration Tests (PostgreSQL v9.6)
    env:
    - BACKEND=postgresql
    addons:
      postgresql: "9.6"
      apt:
        update: true
        packages:
        - rabbitmq-server
    before_install:
    - psql -U postgres -c "CREATE DATABASE ${DB_NAME}"
    - sed -i '/mysqlclient/d' $WEB/requirements.txt
    - sed -i 's/^RUN_EVERY =.*$/RUN_EVERY = 180/' $WEB/website/settings/constants.py
    script:
    - cd $WEB && python manage.py runserver 0.0.0.0:8000 &
    - sleep 10 && cd $DRIVER && fab integration_tests
    after_success: []

install:
- pip install -r $WEB/requirements.txt
- pip freeze | column -x
before_script:
- env | sort
- cd $WEB
- sed -i  "s|\('celery', 'db.*$\)|'console', \1|" website/settings/common.py
- cp $ROOT/docker/credentials.py website/settings
- cat website/settings/credentials.py
- python manage.py makemigrations
- python manage.py migrate
- python manage.py startcelery
- python manage.py createuser admin $ADMIN_PASSWORD --superuser
script:
- cd $ROOT/server && coverage run --omit="*/tests/*" -m unittest discover -s analysis/tests -v
- cd $WEB && coverage run manage.py test --noinput -v 2
- cd $CONTROLLER && gradle build
- cd $ROOT && git reset --soft ${TRAVIS_COMMIT_RANGE%...*} && git status && git
  log | head -n 1 && git lint
after_success:
- >
  codecov -F analysis -f "${ROOT}/server/.coverage" ||
  (sleep 5 && codecov -F analysis -f "${ROOT}/server/.coverage") ||
  (sleep 5 && codecov -F analysis -f "${ROOT}/server/.coverage") &&
  echo "Codecov did not collect coverage reports"
- >
  codecov -F website -f "${WEB}/.coverage" ||
  (sleep 5 && codecov -F website -f "${WEB}/.coverage") ||
  (sleep 5 && codecov -F website -f "${WEB}/.coverage") &&
  echo "Codecov did not collect coverage reports"
